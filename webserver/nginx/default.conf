server {
    listen 80;
    listen [::]:80;
    return 301 https://$host$request_uri;
}

upstream coder-app {
  server host.docker.internal:8081;
}

server {

    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ${DOMAIN_NAME};

    # This tells Nginx what CA to verify against
    ssl_client_certificate    /etc/nginx/certs/rootCA.pem;

    # This tells Nginx to verify clients
    #ssl_verify_depth 2;
    #ssl_verify_client on;

    ssl_certificate           /etc/nginx/certs/${DOMAIN_NAME}.pem;
    ssl_certificate_key       /etc/nginx/certs/${DOMAIN_NAME}-key.pem;
    #ssl on;
    ssl_session_cache  builtin:1000  shared:SSL:10m;
    ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
    ssl_prefer_server_ciphers on;

    # This will return a 403 to all clients without a proper certificate
    #if ($ssl_client_verify != "SUCCESS") { return 403; }
    location / {

      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;
      proxy_set_header        Upgrade $http_upgrade;
      proxy_set_header        Connection upgrade;
      proxy_set_header        Accept-Encoding gzip;
      #proxy_set_header       SSL_Client $ssl_client_s_dn;
      #proxy_set_header       SSL_Client_Verify $ssl_client_verify;
      proxy_pass              http://coder-app;
      #proxy_redirect         http://coder_server:8443 https://your_domain_name;
      proxy_read_timeout      90;
      
    }
  }